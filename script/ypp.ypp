%{
#include "hpp.hpp"
%}
%defines %union { sym*o; }
%token <o> SYM NUM STR 				/* symbol number string */
%token <o> EQ ADD SUB MUL DIV POW 	/* = + - * / ^ */
%token <o> ADDEQ					/* += */
%token <o> AT DOT COMMA COLON		/* @ . , : */
%token <o> LP RP LQ RQ LB RB LL GG 	/* ( ) [ ] { } < > */
%token <o> LLLL GGGG				/* << >> */
%type  <o> ex list vector 			/* expression [list] <vector> pa:ir */
%type  <o> lambda 					/* {lambda} */

%left EQ ADDEQ
%left ADD SUB
%left MUL DIV
%left POW
%left AT
%left COLON COMMA
%left LLLL GGGG
%left LP RP
%%
syntax: | syntax ex		{ W($2); W("\n-----------"); 
	  					  W($2->eval()); W("\n============="); } ;
ex: SYM | NUM | STR
  	| LP ex RP			{ $$=$2; }
	| LQ list RQ		{ $$=$2; }
	| LL vector GG		{ $$=$2; }
	| LB lambda RB		{ $$=$2; }
	| ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADDEQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex GGGG ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex COLON ex		{ $$=new Pair($1,$3); }
	| ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }
	| ex LP list RP		{ $$=new Op("@"); $$->push($1); $$->push($3); }
;
list:					{ $$=new List(); }
	| list COMMA ex		{ $$=$1; $$->push($3); }
	| list ex			{ $$=$1; $$->push($2); }
;
vector:					{ $$=new Vector(); }
	| vector ex			{ $$=$1; $$->push($2); }
;
lambda:					{ $$=new Lambda(); }
	| lambda SYM COLON	{ $$=$1; $$->setpar($2); }
	| lambda ex			{ $$=$1; $$->push($2); }
;
%%
