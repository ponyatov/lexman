%{
#include "hpp.hpp"
std::string StringParseBuffer;
%}
%option noyywrap
%option yylineno
%x stringstate
S [\+\-]?
N [0-9]+
%%
#[^\n]*				{}				/* line comment */

'				{BEGIN(stringstate); StringParseBuffer="";}		/* string */
<stringstate>'	{BEGIN(INITIAL);
				yylval.o = new Str(StringParseBuffer); return STR;}
<stringstate>.	{StringParseBuffer+=yytext;}

									/* numbers */
{S}{N}\.{N}			TOC(Num,NUM)	/* floating point */
{S}{N}[eE]{S}{N}	TOC(Num,NUM)	/* exponential */
{S}{N}				TOC(Int,NUM)	/* integer */
0x[0-9A-F]+			TOC(Hex,NUM)	/* hex */
0b[01]+				TOC(Bin,NUM)	/* binary */

[a-zA-Z0-9_]+		TOC(Sym,SYM)	/* symbol */

									/* operators */
\(					TOC(Op,LP)
\)					TOC(Op,RP)
\[					TOC(Op,LQ)
\]					TOC(Op,RQ)
\{					TOC(Op,LB)
\}					TOC(Op,RB)
\<					TOC(Op,LL)
\>					TOC(Op,GG)
\<\<				TOC(Op,LLLL)
\>\>				TOC(Op,GGGG)
\+\=				TOC(Op,ADDEQ)
\=					TOC(Op,EQ)
\:					TOC(Op,COLON)
\@					TOC(Op,AT)
\.					TOC(Op,DOT)
\,					TOC(Op,COMMA)

\+					TOC(Op,ADD)
\-					TOC(Op,SUB)
\*					TOC(Op,MUL)
\/					TOC(Op,DIV)
\^					TOC(Op,POW)

[ \t\r\n]+	{}
.			{}
%%
