%{
#include "hpp.hpp"
%}
%defines %union { sym*o; }
%token <o> SYM NUM STR			// symbol number string
%token <o> EQ AT COMMA DOT		// = @ , .
%token <o> ADD SUB MUL DIV POW	// + - * / ^
%type <o> ex scalar				// expression scalar

%left EQ
%left ADD SUB
%left MUL DIV
%left POW
%left COMMA
%%
bI: | bI ex { W($2); W("\n-------"); W($2->eval()); W("\n========\n"); } ;
scalar : SYM | NUM | STR ;
ex: scalar
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex COMMA ex	{ $$=$2; $$->push($1); $$->push($3); }
;
%%
